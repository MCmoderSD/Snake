Index: src/main/java/de/MCmoderSD/utilities/json/JsonUtility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.MCmoderSD.utilities.json;\n\nimport java.util.HashMap;\n\n@SuppressWarnings(\"unused\")\npublic class JsonUtility {\n\n    // Attributes\n    private final HashMap<String, JsonNode> jsonCache;\n\n    private String url;\n    private boolean isAbsolute;\n\n    // Default constructor\n    public JsonUtility() {\n        url = null;\n        isAbsolute = false;\n        this.jsonCache = new HashMap<>();\n    }\n\n    // Constructor with url\n    public JsonUtility(String url) {\n        this.url = url;\n        this.isAbsolute = false;\n        this.jsonCache = new HashMap<>();\n    }\n\n    // Constructor with isAbsolute path\n    public JsonUtility(boolean isAbsolute) {\n        this.url = null;\n        this.isAbsolute = isAbsolute;\n        this.jsonCache = new HashMap<>();\n    }\n\n    public JsonUtility(HashMap<String, JsonNode> jsonCache) {\n        this.url = null;\n        this.isAbsolute = false;\n        this.jsonCache = jsonCache;\n    }\n\n    public JsonUtility(JsonUtility jsonUtility) {\n        this.url = jsonUtility.getURL();\n        this.isAbsolute = jsonUtility.isAbsolute();\n        this.jsonCache = jsonUtility.getJsonCache();\n    }\n\n    public JsonUtility(JsonNode jsonNode) {\n        this.url = null;\n        this.isAbsolute = jsonNode.isAbsolute();\n        this.jsonCache = new HashMap<>();\n\n        jsonCache.put(jsonNode.getPath(), jsonNode);\n    }\n\n    public JsonUtility(JsonNode[] jsonNodes) {\n        this.url = null;\n        this.isAbsolute = false;\n        this.jsonCache = new HashMap<>();\n\n        for (JsonNode jsonNode : jsonNodes) jsonCache.put(jsonNode.getPath(), jsonNode);\n    }\n\n    // Methods\n    public JsonNode load(String path) {\n        if (jsonCache.containsKey(path)) return jsonCache.get(path);\n        else {\n            JsonNode jsonNode = url != null ? new JsonNode(url, path) : new JsonNode(path, isAbsolute);\n            jsonCache.put(path, jsonNode);\n            return jsonNode;\n        }\n    }\n\n    public JsonNode[] load(String[] paths) {\n        JsonNode[] jsonNodes = new JsonNode[paths.length];\n        for (int i = 0; i < paths.length; i++) {\n            if (jsonCache.containsKey(paths[i])) jsonNodes[i] = jsonCache.get(paths[i]);\n            else {\n                JsonNode jsonNode = url != null ? new JsonNode(url, paths[i]) : new JsonNode(paths[i], isAbsolute);\n                jsonCache.put(paths[i], jsonNode);\n                jsonNodes[i] = jsonNode;\n            }\n        }\n        return jsonNodes;\n    }\n\n    public JsonNode load(String url, String path) {\n        if (jsonCache.containsKey(path)) return jsonCache.get(path);\n        else {\n            JsonNode jsonNode = new JsonNode(url, path);\n            jsonCache.put(path, jsonNode);\n            return jsonNode;\n        }\n    }\n\n    public JsonNode[] load(String url, String[] paths) {\n        JsonNode[] jsonNodes = new JsonNode[paths.length];\n        for (int i = 0; i < paths.length; i++) {\n            if (jsonCache.containsKey(paths[i])) jsonNodes[i] = jsonCache.get(paths[i]);\n            else {\n                JsonNode jsonNode = new JsonNode(url, paths[i]);\n                jsonCache.put(paths[i], jsonNode);\n                jsonNodes[i] = jsonNode;\n            }\n        }\n        return jsonNodes;\n    }\n\n    public JsonNode[] load(String[] urls, String[] paths) {\n        JsonNode[] jsonNodes = new JsonNode[paths.length];\n        for (int i = 0; i < paths.length; i++) {\n            if (jsonCache.containsKey(paths[i])) jsonNodes[i] = jsonCache.get(paths[i]);\n            else {\n                JsonNode jsonNode = new JsonNode(urls[i], paths[i]);\n                jsonCache.put(paths[i], jsonNode);\n                jsonNodes[i] = jsonNode;\n            }\n        }\n        return jsonNodes;\n    }\n\n    public JsonNode load(String path, boolean isAbsolute) {\n        if (jsonCache.containsKey(path)) return jsonCache.get(path);\n        else {\n            JsonNode jsonNode = new JsonNode(path, isAbsolute);\n            jsonCache.put(path, jsonNode);\n            return jsonNode;\n        }\n    }\n\n    public JsonNode[] load(String[] paths, boolean isAbsolute) {\n        JsonNode[] jsonNodes = new JsonNode[paths.length];\n        for (int i = 0; i < paths.length; i++) {\n            if (jsonCache.containsKey(paths[i])) jsonNodes[i] = jsonCache.get(paths[i]);\n            else {\n                JsonNode jsonNode = new JsonNode(paths[i], isAbsolute);\n                jsonCache.put(paths[i], jsonNode);\n                jsonNodes[i] = jsonNode;\n            }\n        }\n        return jsonNodes;\n    }\n\n    // Getter\n    public String getURL() {\n        return url;\n    }\n\n    public boolean isEmpty() {\n        return jsonCache.isEmpty();\n    }\n\n    public int size() {\n        return jsonCache.size();\n    }\n\n    public HashMap<String, JsonNode> getJsonCache() {\n        return jsonCache;\n    }\n\n    public boolean isAbsolute() {\n        return isAbsolute;\n    }\n\n    public void setJsonCache(HashMap<String, JsonNode> jsonCache) {\n        this.jsonCache.clear();\n        this.jsonCache.putAll(jsonCache);\n    }\n\n    // Setter\n    public void setURL(String url) {\n        this.url = url;\n    }\n\n    public void setAbsolute(boolean isAbsolute) {\n        this.isAbsolute = isAbsolute;\n    }\n\n    public void setJsonCache(HashMap<String, JsonNode>[] jsonCaches) {\n        this.jsonCache.clear();\n        for (HashMap<String, JsonNode> jsonCache : jsonCaches) this.jsonCache.putAll(jsonCache);\n    }\n\n    // Remove\n    public void remove(String path) {\n        jsonCache.remove(path);\n    }\n\n    public void remove(String[] json) {\n        for (String path : json) jsonCache.remove(path);\n    }\n\n    public void remove(JsonNode jsonNode) {\n        jsonCache.remove(jsonNode.getPath());\n    }\n\n    public void remove(JsonNode[] jsonNodes) {\n        for (JsonNode jsonNode : jsonNodes) jsonCache.remove(jsonNode.getPath());\n    }\n\n    // Add\n    public void add(String path) {\n        if (isAbsolute) jsonCache.put(path, new JsonNode(path, true));\n        else jsonCache.put(path, new JsonNode(path));\n    }\n\n    public void add(String[] json) {\n        for (String path : json) {\n            if (isAbsolute) jsonCache.put(path, new JsonNode(path, true));\n            else jsonCache.put(path, new JsonNode(path));\n        }\n    }\n\n    public void add(JsonNode jsonNode) {\n        jsonCache.put(jsonNode.getPath(), jsonNode);\n    }\n\n    public void add(JsonNode[] jsonNodes) {\n        for (JsonNode jsonNode : jsonNodes) jsonCache.put(jsonNode.getPath(), jsonNode);\n    }\n\n    public void add(HashMap<String, JsonNode> jsonCache) {\n        this.jsonCache.putAll(jsonCache);\n    }\n\n    public void add(HashMap<String, JsonNode>[] jsonCaches) {\n        for (HashMap<String, JsonNode> jsonCache : jsonCaches) this.jsonCache.putAll(jsonCache);\n    }\n\n    // Replace\n    public void replace(String path, JsonNode jsonNode) {\n        jsonCache.replace(path, jsonNode);\n    }\n\n    public void replace(String path, JsonNode[] jsonNodes) {\n        for (JsonNode jsonNode : jsonNodes) jsonCache.replace(path, jsonNode);\n    }\n\n    // Clear\n    public void clear() {\n        jsonCache.clear();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/MCmoderSD/utilities/json/JsonUtility.java b/src/main/java/de/MCmoderSD/utilities/json/JsonUtility.java
--- a/src/main/java/de/MCmoderSD/utilities/json/JsonUtility.java	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/src/main/java/de/MCmoderSD/utilities/json/JsonUtility.java	(date 1702978362895)
@@ -239,4 +239,4 @@
     public void clear() {
         jsonCache.clear();
     }
-}
+}
\ No newline at end of file
Index: src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.MCmoderSD.utilities.sound;\n\nimport javax.sound.sampled.*;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.Objects;\n\npublic class WavPlayer {\n\n    // Attributes\n    private boolean loop;\n    private Clip clip;\n\n    // Constructor\n    public WavPlayer(String audioPath, boolean loop) {\n        this.loop = loop;\n        loadClip(audioPath);\n    }\n\n    // Loader\n    private void loadClip(String audioPath) {\n        try {\n            InputStream audioSrc;\n            if (audioPath.startsWith(\"http\") || new File(audioPath).isAbsolute())\n                audioSrc = new URL(audioPath).openStream();\n            else audioSrc = getClass().getResourceAsStream(audioPath); // Relative path\n\n            // Add buffer for mark/reset support\n            InputStream bufferedIn = new BufferedInputStream(Objects.requireNonNull(audioSrc));\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(bufferedIn);\n\n            AudioFormat baseFormat = audioStream.getFormat();\n            AudioFormat decodedFormat = new AudioFormat(\n                    AudioFormat.Encoding.PCM_SIGNED,\n                    baseFormat.getSampleRate(),\n                    16,\n                    baseFormat.getChannels(),\n                    baseFormat.getChannels() * 2,\n                    baseFormat.getSampleRate(),\n                    false\n            );\n            AudioInputStream decodedAudioStream = AudioSystem.getAudioInputStream(decodedFormat, audioStream);\n\n            clip = AudioSystem.getClip();\n            clip.open(decodedAudioStream);\n            if (loop) clip.loop(Clip.LOOP_CONTINUOUSLY);\n        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    // Play clip\n    public void play() {\n        if (clip == null) return;\n        if (clip.isRunning()) {\n            clip.stop(); // Stop the clip before resetting it\n        }\n        clip.setFramePosition(0);\n        clip.start();\n    }\n\n    // Pause clip\n    public void pause() {\n        if (clip == null) return;\n        clip.stop();\n    }\n\n    // Resume clip\n    public void resume() {\n        if (clip == null) return;\n        clip.start();\n    }\n\n    // Stop clip\n    public void stop() {\n        if (clip == null) return;\n        clip.stop();\n        clip.setFramePosition(0);\n    }\n\n    // Close clip\n    public void close() {\n        stop();\n        clip.close();\n    }\n\n    // Toggle loop\n    public void toggleLoop() {\n        loop = !loop;\n    }\n\n    // Check if clip is running\n    public boolean isPlaying() {\n        if (clip == null) return false;\n        return clip.isRunning();\n    }\n\n    // Check if clip is looping\n    public boolean isLoop() {\n        return loop;\n    }\n\n    // Set loop\n    public void setLoop(boolean loop) {\n        this.loop = loop;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java b/src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java
--- a/src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java	(date 1702995415660)
@@ -1,11 +1,10 @@
 package de.MCmoderSD.utilities.sound;
 
 import javax.sound.sampled.*;
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
+import java.io.*;
 import java.net.URL;
+import java.nio.file.Files;
+import java.nio.file.Paths;
 import java.util.Objects;
 
 public class WavPlayer {
@@ -23,10 +22,19 @@
     // Loader
     private void loadClip(String audioPath) {
         try {
+            boolean isWindows = System.getProperty("os.name").toLowerCase().contains("windows");
+
+            // Remove leading slash on Linux
+            if (!isWindows && audioPath.startsWith("/")) audioPath = audioPath.substring(1);
+
             InputStream audioSrc;
-            if (audioPath.startsWith("http") || new File(audioPath).isAbsolute())
-                audioSrc = new URL(audioPath).openStream();
-            else audioSrc = getClass().getResourceAsStream(audioPath); // Relative path
+            if (audioPath.startsWith("http")) audioSrc = new URL(audioPath).openStream(); // URL
+            else if (new File(audioPath).isAbsolute())
+                audioSrc = Files.newInputStream(Paths.get(audioPath)); // Absolute path
+            else if (isWindows) audioSrc = getClass().getResourceAsStream(audioPath); // Relative path Windows
+            else audioSrc = getClass().getClassLoader().getResourceAsStream(audioPath); // Relative path Linux
+            if (audioSrc == null) throw new FileNotFoundException("File not found: " + audioPath); // Null check
+
 
             // Add buffer for mark/reset support
             InputStream bufferedIn = new BufferedInputStream(Objects.requireNonNull(audioSrc));
@@ -55,9 +63,8 @@
     // Play clip
     public void play() {
         if (clip == null) return;
-        if (clip.isRunning()) {
-            clip.stop(); // Stop the clip before resetting it
-        }
+        if (clip.isRunning()) clip.stop(); // Stop the clip before resetting it
+        if (loop) clip.loop(Clip.LOOP_CONTINUOUSLY);
         clip.setFramePosition(0);
         clip.start();
     }
@@ -70,13 +77,15 @@
 
     // Resume clip
     public void resume() {
-        if (clip == null) return;
+        if (clip == null || clip.getFramePosition() == 0 || clip.getFramePosition() == clip.getFrameLength()) return;
+        if (loop) clip.loop(Clip.LOOP_CONTINUOUSLY);
         clip.start();
     }
 
     // Stop clip
     public void stop() {
         if (clip == null) return;
+        clip.loop(0);
         clip.stop();
         clip.setFramePosition(0);
     }
Index: src/main/java/de/MCmoderSD/utilities/image/ImageStreamer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.MCmoderSD.utilities.image;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.HashMap;\n\n@SuppressWarnings(\"unused\")\npublic class ImageStreamer extends ImageUtility {\n\n    // Default Constructor\n    public ImageStreamer() {\n        isAbsolute = false;\n        bufferedImageCache = new HashMap<>();\n        imageIconCache = new HashMap<>();\n        url = null;\n    }\n\n    // Constructor with URL\n    public ImageStreamer(String url) {\n        isAbsolute = false;\n        bufferedImageCache = new HashMap<>();\n        imageIconCache = new HashMap<>();\n        this.url = url;\n    }\n\n    @Override\n    public BufferedImage read(String url) {\n        if (!url.endsWith(\".png\") && !url.endsWith(\".jpg\") && !url.endsWith(\".jpeg\") && !url.endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + url); // Image format is not supported\n        if (bufferedImageCache.containsKey(url))\n            return bufferedImageCache.get(url); // Checks the cache for the image\n\n        BufferedImage image = null;\n\n        try {\n            if (this.url != null && !url.contains(this.url)) image = ImageIO.read(new URL(this.url + url));\n            else image = ImageIO.read(new URL(url));\n        } catch (IOException e) {\n            System.err.println(e.getMessage());\n        }\n\n        // Null check\n        if (image == null)\n            throw new IllegalArgumentException(\"The image could not be loaded: \" + url); // Image could not be loaded (Image is null\n\n        // Add to cache\n        bufferedImageCache.put(url, image);\n        return image;\n    }\n\n    public BufferedImage read(String url, String resource) {\n        if (!resource.endsWith(\".png\") && !resource.endsWith(\".jpg\") && !resource.endsWith(\".jpeg\") && !resource.endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + resource); // Image format is not supported\n        if (bufferedImageCache.containsKey(resource))\n            return bufferedImageCache.get(resource); // Checks the cache for the image\n\n        BufferedImage image = null;\n\n        try {\n            image = ImageIO.read(new URL(url + resource));\n        } catch (IOException e) {\n            System.err.println(e.getMessage());\n        }\n\n        // Null check\n        if (image == null)\n            throw new IllegalArgumentException(\"The image could not be loaded: \" + url + resource); // Image could not be loaded (Image is null\n\n        // Add to cache\n        bufferedImageCache.put(resource, image);\n        return image;\n    }\n\n    @Override\n    public ImageIcon readGif(String url) {\n        if (!url.endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + url); // Animation format is not supported\n        if (imageIconCache.containsKey(url))\n            return imageIconCache.get(url); // Checks the cache for the Animation\n\n        ImageIcon imageIcon; // Load the Animation\n\n        try {\n            if (this.url != null && !url.contains(this.url)) imageIcon = new ImageIcon(new URL(this.url + url));\n            else imageIcon = new ImageIcon(new URL(url));\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(e);\n        }\n\n        imageIconCache.put(url, imageIcon);\n        return imageIcon;\n    }\n\n    public ImageIcon readGif(String url, String resource) {\n        if (!resource.endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + url + resource); // Animation format is not supported\n        if (imageIconCache.containsKey(resource))\n            return imageIconCache.get(resource); // Checks the cache for the Animation\n\n        ImageIcon imageIcon; // Load the Animation\n\n        try {\n            imageIcon = new ImageIcon(new URL(url + resource));\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(e);\n        }\n\n        imageIconCache.put(resource, imageIcon);\n        return imageIcon;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/MCmoderSD/utilities/image/ImageStreamer.java b/src/main/java/de/MCmoderSD/utilities/image/ImageStreamer.java
--- a/src/main/java/de/MCmoderSD/utilities/image/ImageStreamer.java	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/src/main/java/de/MCmoderSD/utilities/image/ImageStreamer.java	(date 1702995415588)
@@ -1,7 +1,7 @@
 package de.MCmoderSD.utilities.image;
 
 import javax.imageio.ImageIO;
-import javax.swing.ImageIcon;
+import javax.swing.*;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.net.MalformedURLException;
@@ -112,4 +112,4 @@
         imageIconCache.put(resource, imageIcon);
         return imageIcon;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/de/MCmoderSD/utilities/image/ImageUtility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.MCmoderSD.utilities.image;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.HashMap;\n\n@SuppressWarnings(\"unused\")\npublic abstract class ImageUtility {\n\n    // Attributes\n    protected HashMap<String, BufferedImage> bufferedImageCache;\n    protected HashMap<String, ImageIcon> imageIconCache;\n    protected String url;\n    protected boolean isAbsolute;\n\n    // Default Constructor\n    public ImageUtility() {\n        isAbsolute = false;\n        bufferedImageCache = new HashMap<>();\n        imageIconCache = new HashMap<>();\n        url = null;\n    }\n\n    // Constructor with url\n    public ImageUtility(String url) {\n        isAbsolute = false;\n        bufferedImageCache = new HashMap<>();\n        imageIconCache = new HashMap<>();\n        this.url = url;\n    }\n\n    // Constructor with isAbsolute\n    public ImageUtility(boolean isAbsolute) {\n        this.isAbsolute = isAbsolute;\n        bufferedImageCache = new HashMap<>();\n        imageIconCache = new HashMap<>();\n        url = null;\n    }\n\n    // Read image file and return BufferedImage\n    public abstract BufferedImage read(String resource);\n\n    public BufferedImage read(String resource, int width, int height) {\n        return scaleImage(read(resource), width, height);\n    }\n\n    public BufferedImage read(String resource, int scale) {\n        return scaleImage(read(resource), scale);\n    }\n\n    public BufferedImage read(URL url) {\n        if (!url.toString().endsWith(\".png\") && !url.toString().endsWith(\".jpg\") && !url.toString().endsWith(\".jpeg\") && !url.toString().endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + url); // Image format is not supported\n        if (bufferedImageCache.containsKey(url.toString()))\n            return bufferedImageCache.get(url.toString()); // Checks the cache for the image\n\n        BufferedImage image = null;\n\n        try {\n            image = ImageIO.read(url);\n        } catch (IOException e) {\n            System.err.println(e.getMessage());\n        }\n\n        // Null check\n        if (image == null) throw new IllegalArgumentException(\"The image could not be loaded: \" + url);\n\n        bufferedImageCache.put(url.toString(), image);\n        return image;\n    }\n\n    public BufferedImage read(URL url, int width, int height) {\n        return scaleImage(read(url), width, height);\n    }\n\n    public BufferedImage read(URL url, int scale) {\n        return scaleImage(read(url), scale);\n    }\n\n    public BufferedImage read(ImageIcon image) {\n        return (BufferedImage) image.getImage();\n    }\n\n    public BufferedImage read(ImageIcon image, int width, int height) {\n        return scaleImage(read(image), width, height);\n    }\n\n    public BufferedImage read(ImageIcon image, int scale) {\n        return scaleImage(read(image), scale);\n    }\n\n    public BufferedImage read(Image image) {\n        return (BufferedImage) image;\n    }\n\n    public BufferedImage read(Image image, int width, int height) {\n        return scaleImage(read(image), width, height);\n    }\n\n    public BufferedImage read(Image image, int scale) {\n        return scaleImage(read(image), scale);\n    }\n\n    // Create ImageIcon\n    public ImageIcon createImageIcon(String resource) {\n        if (imageIconCache.containsKey(resource)) return imageIconCache.get(resource);\n\n        if (this.url != null) resource = (this.url + resource);\n\n        ImageIcon imageIcon = new ImageIcon(read(resource));\n        imageIconCache.put(resource, imageIcon);\n\n        return imageIcon;\n    }\n\n    public ImageIcon createImageIcon(String resource, int width, int height) {\n        return new ImageIcon(scaleImage(resource, width, height));\n    }\n\n    public ImageIcon createImageIcon(String resource, int scale) {\n        return new ImageIcon(scaleImage(resource, scale, scale));\n    }\n\n    public ImageIcon createImageIcon(BufferedImage image) {\n        return new ImageIcon(image);\n    }\n\n    public ImageIcon createImageIcon(BufferedImage image, int width, int height) {\n        return new ImageIcon(scaleImage(image, width, height));\n    }\n\n    public ImageIcon createImageIcon(BufferedImage image, int scale) {\n        return new ImageIcon(scaleImage(image, scale));\n    }\n\n    public ImageIcon createImageIcon(URL url) {\n        return new ImageIcon(read(url));\n    }\n\n    public ImageIcon createImageIcon(URL url, int width, int height) {\n        return new ImageIcon(scaleImage(url, width, height));\n    }\n\n    public ImageIcon createImageIcon(URL url, int scale) {\n        return new ImageIcon(scaleImage(url, scale));\n    }\n\n    public ImageIcon createImageIcon(Image image) {\n        return new ImageIcon(image);\n    }\n\n    public ImageIcon createImageIcon(Image image, int width, int height) {\n        return new ImageIcon(scaleImage(image, width, height));\n    }\n\n    public ImageIcon createImageIcon(Image image, int scale) {\n        return new ImageIcon(scaleImage(image, scale));\n    }\n\n    // Animation Loader\n    public abstract ImageIcon readGif(String resource);\n\n    public ImageIcon readGif(String resource, int width, int height) {\n        return new ImageIcon(readGif(resource).getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));\n    }\n\n    public ImageIcon readGif(String resource, int scale) {\n        return readGif(resource, scale, scale);\n    }\n\n    public ImageIcon readGif(URL url) {\n        if (!url.toString().endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + url); // Animation format is not supported\n        if (imageIconCache.containsKey(url.toString()))\n            return imageIconCache.get(url.toString()); // Checks the cache for the Animation\n\n\n        ImageIcon imageIcon = new ImageIcon(url);\n\n        imageIconCache.put(url.toString(), imageIcon);\n        return imageIcon;\n    }\n\n    public ImageIcon readGif(URL url, int width, int height) {\n        return new ImageIcon(readGif(url).getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));\n    }\n\n    public ImageIcon readGif(URL url, int scale) {\n        return readGif(url, scale, scale);\n    }\n\n\n    // Image scaling\n    public BufferedImage scaleImage(BufferedImage image, int width, int height) {\n        BufferedImage scaledImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n        scaledImage.getGraphics().drawImage(image, 0, 0, width, height, null);\n        return scaledImage;\n    }\n\n    public BufferedImage scaleImage(BufferedImage image, int scale) {\n        return scaleImage(image, scale, scale);\n    }\n\n    public BufferedImage scaleImage(String resource, int width, int height) {\n        return scaleImage(read(resource), width, height);\n    }\n\n    public BufferedImage scaleImage(String resource, int scale) {\n        return scaleImage(resource, scale, scale);\n    }\n\n    public BufferedImage scaleImage(URL url, int width, int height) {\n        return scaleImage(read(url), width, height);\n    }\n\n    public BufferedImage scaleImage(URL url, int scale) {\n        return scaleImage(url, scale, scale);\n    }\n\n    public BufferedImage scaleImage(ImageIcon image, int width, int height) {\n        return scaleImage((BufferedImage) image.getImage(), width, height);\n    }\n\n    public BufferedImage scaleImage(ImageIcon image, int scale) {\n        return scaleImage(image, scale, scale);\n    }\n\n    public BufferedImage scaleImage(Image image, int width, int height) {\n        return scaleImage((BufferedImage) image, width, height);\n    }\n\n    public BufferedImage scaleImage(Image image, int scale) {\n        return scaleImage(image, scale, scale);\n    }\n\n\n    // ImageIcon scaling\n    public ImageIcon scaleImageIcon(ImageIcon image, int width, int height) {\n        return createImageIcon((BufferedImage) image.getImage(), width, height);\n    }\n\n    public ImageIcon scaleImageIcon(ImageIcon image, int scale) {\n        return createImageIcon((BufferedImage) image.getImage(), scale);\n    }\n\n    public ImageIcon scaleImageIcon(String resource, int width, int height) {\n        return createImageIcon(scaleImage(resource, width, height));\n    }\n\n    public ImageIcon scaleImageIcon(String resource, int scale) {\n        return createImageIcon(scaleImage(resource, scale));\n    }\n\n    public ImageIcon scaleImageIcon(URL url, int width, int height) {\n        return createImageIcon(scaleImage(url, width, height));\n    }\n\n    public ImageIcon scaleImageIcon(URL url, int scale) {\n        return createImageIcon(scaleImage(url, scale));\n    }\n\n    public ImageIcon scaleImageIcon(BufferedImage image, int width, int height) {\n        return createImageIcon(scaleImage(image, width, height));\n    }\n\n    public ImageIcon scaleImageIcon(BufferedImage image, int scale) {\n        return createImageIcon(scaleImage(image, scale));\n    }\n\n    public ImageIcon scaleImageIcon(Image image, int width, int height) {\n        return createImageIcon(scaleImage(image, width, height));\n    }\n\n    public ImageIcon scaleImageIcon(Image image, int scale) {\n        return createImageIcon(scaleImage(image, scale));\n    }\n\n    // Animation scaling\n    public ImageIcon scaleAnimation(String resource, int width, int height) {\n        return new ImageIcon(readGif(resource).getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));\n    }\n\n    public ImageIcon scaleAnimation(String resource, int scale) {\n        return scaleAnimation(resource, scale, scale);\n    }\n\n    public ImageIcon scaleAnimation(ImageIcon image, int width, int height) {\n        return new ImageIcon(image.getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));\n    }\n\n    public ImageIcon scaleAnimation(ImageIcon image, int scale) {\n        return scaleAnimation(image, scale, scale);\n    }\n\n    public ImageIcon scaleAnimation(URL url, int width, int height) {\n        return new ImageIcon(readGif(url).getImage().getScaledInstance(width, height, Image.SCALE_DEFAULT));\n    }\n\n    public ImageIcon scaleAnimation(URL url, int scale) {\n        return scaleAnimation(url, scale, scale);\n    }\n\n    // Setter\n    public void addImageToCache(String resource, BufferedImage image) {\n        bufferedImageCache.put(resource, image);\n    }\n\n    public void addImageToCache(String resource, ImageIcon image) {\n        imageIconCache.put(resource, image);\n    }\n\n    public void clearImageIconCache() {\n        imageIconCache.clear();\n    }\n\n    public void removeImageIcon(String resource) {\n        imageIconCache.remove(resource);\n    }\n\n    public void clearImageCache() {\n        bufferedImageCache.clear();\n    }\n\n    public void removeImage(String resource) {\n        bufferedImageCache.remove(resource);\n    }\n\n    public void clearCache() {\n        bufferedImageCache.clear();\n        imageIconCache.clear();\n    }\n\n    public void switchMode() {\n        isAbsolute = !isAbsolute;\n    }\n\n    // Getter\n    public HashMap<String, BufferedImage> getBufferedImageCache() {\n        return bufferedImageCache;\n    }\n\n    public HashMap<String, ImageIcon> getImageIconCache() {\n        return imageIconCache;\n    }\n\n    public boolean isCached(String resource, boolean isImageIcon) {\n        return isImageIcon ? imageIconCache.containsKey(resource) : bufferedImageCache.containsKey(resource);\n    }\n\n    public boolean isCached(BufferedImage image) {\n        return bufferedImageCache.containsValue(image);\n    }\n\n    public boolean isCached(ImageIcon image) {\n        return imageIconCache.containsValue(image);\n    }\n\n    public boolean isAbsolute() {\n        return isAbsolute;\n    }\n\n    public void setAbsolute(boolean isAbsolute) {\n        this.isAbsolute = isAbsolute;\n    }\n\n    public String getURL() {\n        return url;\n    }\n\n    public void setURL(String url) {\n        this.url = url;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/MCmoderSD/utilities/image/ImageUtility.java b/src/main/java/de/MCmoderSD/utilities/image/ImageUtility.java
--- a/src/main/java/de/MCmoderSD/utilities/image/ImageUtility.java	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/src/main/java/de/MCmoderSD/utilities/image/ImageUtility.java	(date 1702995415628)
@@ -1,8 +1,8 @@
 package de.MCmoderSD.utilities.image;
 
 import javax.imageio.ImageIO;
-import javax.swing.ImageIcon;
-import java.awt.Image;
+import javax.swing.*;
+import java.awt.*;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.net.URL;
Index: src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.MCmoderSD.utilities.sound;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\n@SuppressWarnings(\"unused\")\npublic class AudioPlayer {\n\n    // Attributes\n    private final HashMap<String, WavPlayer> wavPlayers; // AudioPath, WavPlayer\n    private final ArrayList<WavPlayer> instantWavPlayers; // WavPlayer\n\n    // Variables\n    public String url;\n\n    // Constructor\n    public AudioPlayer() {\n        wavPlayers = new HashMap<>();\n        instantWavPlayers = new ArrayList<>();\n    }\n\n    // Constructor with url\n    public AudioPlayer(String url) {\n        this.url = url;\n        wavPlayers = new HashMap<>();\n        instantWavPlayers = new ArrayList<>();\n    }\n\n    // Load audio with loop\n    public void loadAudio(String audioPath, boolean loop) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            WavPlayer wavPlayer = new WavPlayer(audioPath, loop);\n            wavPlayers.put(audioPath, wavPlayer);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Load audio\n    public void loadAudio(String audioPath) {\n        loadAudio(audioPath, false);\n    }\n\n    // Play audio with loop\n    public void play(String audioPath, boolean loop) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) {\n                wavPlayers.get(audioPath).play();\n                if (wavPlayers.get(audioPath).isPlaying()) {\n                    WavPlayer wavPlayer = new WavPlayer(audioPath, loop);\n                    instantWavPlayers.add(wavPlayer);\n                    wavPlayer.play();\n                }\n            } else {\n                loadAudio(audioPath, false);\n                play(audioPath, loop);\n            }\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Play audio\n    public void play(String audioPath) {\n        if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n        play(audioPath, false);\n    }\n\n    // Pause audio\n    public void pause(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) wavPlayers.get(audioPath).pause();\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Resume audio\n    public void resume(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) wavPlayers.get(audioPath).resume();\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Stop audio\n    public void stop(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) wavPlayers.get(audioPath).stop();\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Close audio\n    public void close(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) wavPlayers.get(audioPath).close();\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Toggle loop\n    public void toggleLoop(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) wavPlayers.get(audioPath).toggleLoop();\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Set loop\n    public void toggleLoop(int index) {\n        if (index < instantWavPlayers.size()) instantWavPlayers.get(index).toggleLoop();\n        else System.err.println(\"Index out of bounds: \" + index);\n    }\n\n    // Set loop\n    public void setLoop(String audioPath, boolean loop) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) wavPlayers.get(audioPath).setLoop(loop);\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Set loop\n    public void setLoop(int index, boolean loop) {\n        if (index < instantWavPlayers.size()) instantWavPlayers.get(index).setLoop(loop);\n        else System.err.println(\"Index out of bounds: \" + index);\n    }\n\n    // Close all audio\n    public void closeAll() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.close();\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.close();\n    }\n\n    // Stop all playing audio\n    public void stopAll() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.stop();\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.stop();\n    }\n\n    // Pause all playing audio\n    public void pauseAll() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.pause();\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.pause();\n    }\n\n    // Resume all paused audio\n    public void resumeAll() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.resume();\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.resume();\n    }\n\n    public void toggleLoopAll() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.toggleLoop();\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.toggleLoop();\n    }\n\n    public void setLoopAll(boolean loop) {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.setLoop(loop);\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.setLoop(loop);\n    }\n\n    // Clear all audio\n    public void clearAll() {\n        wavPlayers.clear();\n        instantWavPlayers.clear();\n    }\n\n    // Play all loaded audio\n    public void playAllLoaded() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.play();\n    }\n\n    // Play all instant audio\n    public void playAllInstant() {\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.play();\n    }\n\n    // Stop all playing audio\n    public void stopAllLoaded() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.stop();\n    }\n\n    // Stop all playing audio\n    public void stopAllInstant() {\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.stop();\n    }\n\n    // Pause all playing audio\n    public void pauseAllLoaded() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.pause();\n    }\n\n    // Pause all playing audio\n    public void pauseAllInstant() {\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.pause();\n    }\n\n    // Resume all paused audio\n    public void resumeAllLoaded() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.resume();\n    }\n\n    // Resume all paused audio\n    public void resumeAllInstant() {\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.resume();\n    }\n\n    // Toggle loop for all loaded audio\n    public void toggleLoopAllLoaded() {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.toggleLoop();\n    }\n\n    // Toggle loop for all instant audio\n    public void toggleLoopAllInstant() {\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.toggleLoop();\n    }\n\n    // Set loop for all loaded audio\n    public void setLoopAllLoaded(boolean loop) {\n        for (WavPlayer wavPlayer : wavPlayers.values()) wavPlayer.setLoop(loop);\n    }\n\n    // Set loop for all instant audio\n    public void setLoopAllInstant(boolean loop) {\n        for (WavPlayer wavPlayer : instantWavPlayers) wavPlayer.setLoop(loop);\n    }\n\n    // Clear all instant audio\n    public void clearInstant() {\n        instantWavPlayers.clear();\n    }\n\n    // Clear all loaded audio\n    public void clearLoaded() {\n        wavPlayers.clear();\n    }\n\n    // Clear audio from wavPlayers\n    public void clear(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) wavPlayers.remove(audioPath);\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Adds wavPlayer to wavPlayers\n    public void add(String audioPath, WavPlayer wavPlayer) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (!wavPlayers.containsKey(audioPath)) wavPlayers.put(audioPath, wavPlayer);\n            else System.err.println(\"Audio already loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n    }\n\n    // Adds wavPlayer to instantWavPlayers\n    public void add(WavPlayer wavPlayer) {\n        instantWavPlayers.add(wavPlayer);\n    }\n\n    // Removes wavPlayer from wavPlayers\n    public HashMap<String, WavPlayer> getWavPlayers() {\n        return wavPlayers;\n    }\n\n    // Returns instantWavPlayers\n    public ArrayList<WavPlayer> getInstantWavPlayers() {\n        return instantWavPlayers;\n    }\n\n    // Returns wavPlayer from wavPlayers\n    public WavPlayer getWavPlayer(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) return wavPlayers.get(audioPath);\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n        return null;\n    }\n\n    // Returns wavPlayer from instantWavPlayers\n    public WavPlayer getWavPlayer(int index) {\n        if (index < instantWavPlayers.size()) return instantWavPlayers.get(index);\n        else System.err.println(\"Index out of bounds: \" + index);\n        return null;\n    }\n\n    // Returns true if wavPlayer is playing\n    public boolean isPlaying(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) return wavPlayers.get(audioPath).isPlaying();\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n        return false;\n    }\n\n    // Returns true if wavPlayer is playing\n    public boolean isPlaying(int index) {\n        if (index < instantWavPlayers.size()) return instantWavPlayers.get(index).isPlaying();\n        else System.err.println(\"Index out of bounds: \" + index);\n        return false;\n    }\n\n    public boolean isLoop(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) return wavPlayers.get(audioPath).isLoop();\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n        return false;\n    }\n\n    public boolean isLoop(int index) {\n        if (index < instantWavPlayers.size()) return instantWavPlayers.get(index).isLoop();\n        else System.err.println(\"Index out of bounds: \" + index);\n        return false;\n    }\n\n    // Returns true if wavPlayers contains wavPlayer\n    public boolean isContained(String audioPath) {\n        if (audioPath.endsWith(\".wav\")) {\n            if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;\n            if (wavPlayers.containsKey(audioPath)) return true;\n            else System.err.println(\"Audio not loaded: \" + audioPath);\n        } else System.err.println(\"Unsupported file format: \" + audioPath);\n        return false;\n    }\n\n    // Returns true if instantWavPlayers contains wavPlayer\n    public boolean isContained(int index) {\n        if (index < instantWavPlayers.size()) return true;\n        else System.err.println(\"Index out of bounds: \" + index);\n        return false;\n    }\n\n    // Returns the size of wavPlayers + instantWavPlayers\n    public int size() {\n        return wavPlayers.size() + instantWavPlayers.size();\n    }\n\n    // Returns the size of wavPlayers\n    public int sizeLoaded() {\n        return wavPlayers.size();\n    }\n\n    // Returns the size of instantWavPlayers\n    public int sizeInstant() {\n        return instantWavPlayers.size();\n    }\n\n    // Returns the url\n    public String getUrl() {\n        return url;\n    }\n\n    // Set url\n    public void setUrl(String url) {\n        this.url = url;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java b/src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java
--- a/src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java	(date 1702978362895)
@@ -28,6 +28,7 @@
 
     // Load audio with loop
     public void loadAudio(String audioPath, boolean loop) {
+        if (audioPath.endsWith("empty.wav")) return; // Skip empty sound
         if (audioPath.endsWith(".wav")) {
             if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;
             WavPlayer wavPlayer = new WavPlayer(audioPath, loop);
@@ -42,6 +43,7 @@
 
     // Play audio with loop
     public void play(String audioPath, boolean loop) {
+        if (audioPath.endsWith("empty.wav")) return; // Skip empty sound
         if (audioPath.endsWith(".wav")) {
             if (url != null && !audioPath.startsWith(url)) audioPath = url + audioPath;
             if (wavPlayers.containsKey(audioPath)) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AnalysisUIOptions\">\n    <option name=\"ANALYZE_INJECTED_CODE\" value=\"false\" />\n  </component>\n  <component name=\"ArtifactsWorkspaceSettings\">\n    <artifacts-to-build>\n      <artifact name=\"Snake:jar\" />\n    </artifacts-to-build>\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"160aacd4-75e6-441f-8907-bcaf0ba36c66\" name=\"Changes\" comment=\"Json Utility Update\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/out/artifacts/Snake-asset-streaming.jar\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/artifacts/Snake-asset-streaming.jar\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/out/artifacts/Snake.jar\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pom.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/core/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/core/Game.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/main/Config.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/main/Config.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/Mp3Player.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Animations/Feet.gif\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Animations/Head.gif\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Animations/LegTile.gif\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Animations/LegTransition.gif\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Animations/LowerBody.gif\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Animations/OpFood.gif\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Animations/UpperBody.gif\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Audio/Eating.wav\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Audio/OOF.wav\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Audio/Rainbow.wav\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/BackgroundTile.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/Feet.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/Food.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/GoldFood.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/Head.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/Icon.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/LegTile.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/LegTransition.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/LowerBody.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/Images/UpperBody.png\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/config/default.json\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/language/de.json\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/language/en.json\" beforeDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"CompilerWorkspaceConfiguration\">\n    <option name=\"MAKE_PROJECT_ON_SAVE\" value=\"true\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"FormatOnSaveOptions\">\n    <option name=\"myRunOnSave\" value=\"true\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"OptimizeOnSaveOptions\">\n    <option name=\"myRunOnSave\" value=\"true\" />\n  </component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"groupByToolId\" value=\"true\" />\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n    <option name=\"sortByName\" value=\"true\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;customColor&quot;: &quot;&quot;,\n  &quot;associatedIndex&quot;: 7\n}</component>\n  <component name=\"ProjectId\" id=\"2YF2SE42TOb4MYgzYDBnKt2rmW2\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\n    &quot;ASKED_MARK_IGNORED_FILES_AS_EXCLUDED&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;code.cleanup.on.save&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/MCmoderSD/IdeaProjects/Current/Snake/src/main/java/de/MCmoderSD/utilities/sound&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Artifacts&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\n    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;actions.on.save&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\MCmoderSD\\IdeaProjects\\Current\\Snake\\src\\main\\java\\de\\MCmoderSD\\utilities\\sound\" />\n      <recent name=\"C:\\Users\\MCmoderSD\\IdeaProjects\\Current\\Snake\\src\\main\\java\\de\\MCmoderSD\\utilities\\json\" />\n      <recent name=\"C:\\Users\\MCmoderSD\\IdeaProjects\\Current\\Snake\\src\\main\\resources\" />\n      <recent name=\"C:\\Users\\MCmoderSD\\IdeaProjects\\Current\\Snake\\src\\main\\java\\de\\MCmoderSD\\utilities\" />\n      <recent name=\"C:\\Users\\MCmoderSD\\IdeaProjects\\Current\\Snake\\src\\main\\java\\de\\MCmoderSD\\utilities\\image\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\MCmoderSD\\IdeaProjects\\Current\\Snake\\storage\" />\n      <recent name=\"C:\\Users\\MCmoderSD\\IdeaProjects\\Current\\Snake\\docs\" />\n      <recent name=\"C:\\Users\\MCmoderSD\\IdeaProjects\\Current\\Snake\\src\\main\\resources\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Main\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"de.MCmoderSD.main.Main\" />\n      <module name=\"Snake\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"de.MCmoderSD.main.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Snake-asset-streaming.jar\" type=\"JarApplication\" temporary=\"true\">\n      <option name=\"JAR_PATH\" value=\"$PROJECT_DIR$/out/artifacts/Snake-asset-streaming.jar\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"Snake.jar\" type=\"JarApplication\" temporary=\"true\">\n      <option name=\"JAR_PATH\" value=\"$PROJECT_DIR$/out/artifacts/Snake.jar\" />\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.Main\" />\n      <item itemvalue=\"JAR Application.Snake-asset-streaming.jar\" />\n      <item itemvalue=\"JAR Application.Snake.jar\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n        <item itemvalue=\"JAR Application.Snake-asset-streaming.jar\" />\n        <item itemvalue=\"JAR Application.Snake.jar\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"160aacd4-75e6-441f-8907-bcaf0ba36c66\" name=\"Changes\" comment=\"\" />\n      <created>1697792516620</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1697792516620</updated>\n      <workItem from=\"1700107012235\" duration=\"1899000\" />\n      <workItem from=\"1700228701826\" duration=\"42000\" />\n      <workItem from=\"1700228755646\" duration=\"17000\" />\n      <workItem from=\"1700228798093\" duration=\"8000\" />\n      <workItem from=\"1700228815984\" duration=\"8796000\" />\n      <workItem from=\"1700285483533\" duration=\"5857000\" />\n      <workItem from=\"1700291432295\" duration=\"433000\" />\n      <workItem from=\"1700325129613\" duration=\"2862000\" />\n      <workItem from=\"1700384818284\" duration=\"27000\" />\n      <workItem from=\"1700469300447\" duration=\"1002000\" />\n      <workItem from=\"1700592545795\" duration=\"87000\" />\n      <workItem from=\"1700864760855\" duration=\"2136000\" />\n      <workItem from=\"1700867761557\" duration=\"119000\" />\n      <workItem from=\"1701034269521\" duration=\"397000\" />\n      <workItem from=\"1701036157572\" duration=\"769000\" />\n      <workItem from=\"1701083802269\" duration=\"89000\" />\n      <workItem from=\"1701083904047\" duration=\"7000\" />\n      <workItem from=\"1701134931709\" duration=\"1208000\" />\n      <workItem from=\"1701143645251\" duration=\"22000\" />\n      <workItem from=\"1701143680000\" duration=\"283000\" />\n      <workItem from=\"1701144560171\" duration=\"672000\" />\n      <workItem from=\"1701160689454\" duration=\"1203000\" />\n      <workItem from=\"1701237004541\" duration=\"38000\" />\n      <workItem from=\"1701237056286\" duration=\"39000\" />\n      <workItem from=\"1701273841612\" duration=\"293000\" />\n      <workItem from=\"1701363091577\" duration=\"264000\" />\n      <workItem from=\"1701455914650\" duration=\"430000\" />\n      <workItem from=\"1701456367365\" duration=\"1776000\" />\n      <workItem from=\"1701466048095\" duration=\"126000\" />\n      <workItem from=\"1701904607366\" duration=\"677000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"release v0.9.1&#10;- code improvements\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700108529937</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700108529937</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"release v1.0&#10;- code improvements&#10;- custom assets&#10;- custom language&#10;- improved debug\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700237557414</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700237557414</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"release v1.1&#10;- op ult added&#10;- bug fixed\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700290147112</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700290147112</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"release v1.1.1&#10;- fix&#10;- improved ImageStreamer &#10;- improved JsonStreamer\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700291238288</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700291238288</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"corrupted jar\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700291380165</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700291380165</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"release 1.2&#10;&#10;- improved code &#10;- new JsonUtility\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1700866642055</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1700866642055</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"release 1.2.1&#10;&#10;- improved code &#10;- new JsonUtility\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1701036839475</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1701036839477</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Json Utility Update\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1701363340685</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1701363340685</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"9\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"release v0.9.1&#10;- code improvements\" />\n    <MESSAGE value=\"release v1.0&#10;- code improvements&#10;- custom assets&#10;- custom language&#10;- improved debug\" />\n    <MESSAGE value=\"release v1.1&#10;- op ult added&#10;- bug fixed\" />\n    <MESSAGE value=\"release v1.1.1&#10;- fix&#10;- improved ImageStreamer &#10;- improved JsonStreamer\" />\n    <MESSAGE value=\"corrupted jar\" />\n    <MESSAGE value=\"release 1.2&#10;&#10;- improved code &#10;- new JsonUtility\" />\n    <MESSAGE value=\"release 1.2.1&#10;&#10;- improved code &#10;- new JsonUtility\" />\n    <MESSAGE value=\"Json Utility Update\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Json Utility Update\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.lang.NullPointerException\" package=\"java.lang\" />\n          <option name=\"timeStamp\" value=\"2\" />\n        </breakpoint>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"java.lang.IllegalArgumentException\" package=\"java.lang\" />\n          <option name=\"timeStamp\" value=\"3\" />\n        </breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/.idea/workspace.xml	(date 1706005209229)
@@ -14,38 +14,15 @@
   <component name="ChangeListManager">
     <list default="true" id="160aacd4-75e6-441f-8907-bcaf0ba36c66" name="Changes" comment="Json Utility Update">
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/prettier.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/prettier.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/artifacts/Snake-asset-streaming.jar" beforeDir="false" afterPath="$PROJECT_DIR$/out/artifacts/Snake-asset-streaming.jar" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/artifacts/Snake.jar" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/core/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/core/Game.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/main/Config.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/main/Config.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/artifacts/Snake.jar" beforeDir="false" afterPath="$PROJECT_DIR$/out/artifacts/Snake.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/image/ImageReader.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/image/ImageReader.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/image/ImageStreamer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/image/ImageStreamer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/image/ImageUtility.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/image/ImageUtility.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/json/JsonUtility.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/json/JsonUtility.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/AudioPlayer.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/Mp3Player.java" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities/sound/WavPlayer.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Animations/Feet.gif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Animations/Head.gif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Animations/LegTile.gif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Animations/LegTransition.gif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Animations/LowerBody.gif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Animations/OpFood.gif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Animations/UpperBody.gif" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Audio/Eating.wav" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Audio/OOF.wav" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Audio/Rainbow.wav" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/BackgroundTile.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/Feet.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/Food.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/GoldFood.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/Head.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/Icon.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/LegTile.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/LegTransition.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/LowerBody.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/Images/UpperBody.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/config/default.json" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/language/de.json" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/language/en.json" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -61,19 +38,14 @@
         <option value="Class" />
       </list>
     </option>
-  </component>
-  <component name="FormatOnSaveOptions">
-    <option name="myRunOnSave" value="true" />
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
-  <component name="OptimizeOnSaveOptions">
-    <option name="myRunOnSave" value="true" />
-  </component>
   <component name="ProblemsViewState">
     <option name="groupByToolId" value="true" />
     <option name="selectedTabId" value="CurrentFile" />
@@ -84,7 +56,7 @@
   &quot;associatedIndex&quot;: 7
 }</component>
   <component name="ProjectId" id="2YF2SE42TOb4MYgzYDBnKt2rmW2" />
-  <component name="ProjectLevelVcsManager">
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
     <ConfirmationsSetting value="2" id="Add" />
   </component>
   <component name="ProjectViewState">
@@ -95,13 +67,14 @@
   &quot;keyToString&quot;: {
     &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
     &quot;ASKED_MARK_IGNORED_FILES_AS_EXCLUDED&quot;: &quot;true&quot;,
+    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;code.cleanup.on.save&quot;: &quot;true&quot;,
     &quot;git-widget-placeholder&quot;: &quot;master&quot;,
     &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/MCmoderSD/IdeaProjects/Current/Snake/src/main/java/de/MCmoderSD/utilities/sound&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;/home/mcmodersd/IdeaProjects/Snake/src/main/java/de/MCmoderSD/utilities&quot;,
     &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
     &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
@@ -116,11 +89,11 @@
 }</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/src/main/java/de/MCmoderSD/utilities" />
       <recent name="C:\Users\MCmoderSD\IdeaProjects\Current\Snake\src\main\java\de\MCmoderSD\utilities\sound" />
       <recent name="C:\Users\MCmoderSD\IdeaProjects\Current\Snake\src\main\java\de\MCmoderSD\utilities\json" />
       <recent name="C:\Users\MCmoderSD\IdeaProjects\Current\Snake\src\main\resources" />
       <recent name="C:\Users\MCmoderSD\IdeaProjects\Current\Snake\src\main\java\de\MCmoderSD\utilities" />
-      <recent name="C:\Users\MCmoderSD\IdeaProjects\Current\Snake\src\main\java\de\MCmoderSD\utilities\image" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\MCmoderSD\IdeaProjects\Current\Snake\storage" />
@@ -163,6 +136,13 @@
       </list>
     </recent_temporary>
   </component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="jdk-1.8.0_392-corretto-1.8.0_392-3183f394aec4-70002c48" />
+      </set>
+    </attachedChunks>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -201,6 +181,9 @@
       <workItem from="1701456367365" duration="1776000" />
       <workItem from="1701466048095" duration="126000" />
       <workItem from="1701904607366" duration="677000" />
+      <workItem from="1702995285256" duration="507000" />
+      <workItem from="1703060826325" duration="25000" />
+      <workItem from="1703598777784" duration="159000" />
     </task>
     <task id="LOCAL-00001" summary="release v0.9.1&#10;- code improvements">
       <option name="closed" value="true" />
Index: .idea/prettier.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"PrettierConfiguration\">\n    <option name=\"myConfigurationMode\" value=\"AUTOMATIC\" />\n    <option name=\"myRunOnSave\" value=\"true\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/prettier.xml b/.idea/prettier.xml
--- a/.idea/prettier.xml	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/.idea/prettier.xml	(date 1702995428388)
@@ -2,6 +2,5 @@
 <project version="4">
   <component name="PrettierConfiguration">
     <option name="myConfigurationMode" value="AUTOMATIC" />
-    <option name="myRunOnSave" value="true" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/de/MCmoderSD/utilities/image/ImageReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.MCmoderSD.utilities.image;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Objects;\n\n@SuppressWarnings(\"unused\")\npublic class ImageReader extends ImageUtility {\n\n    // Default Constructor\n    public ImageReader() {\n        isAbsolute = false;\n        bufferedImageCache = new HashMap<>();\n        imageIconCache = new HashMap<>();\n        url = null;\n    }\n\n    // Constructor with isAbsolute\n    public ImageReader(boolean isAbsolute) {\n        this.isAbsolute = isAbsolute;\n        bufferedImageCache = new HashMap<>();\n        imageIconCache = new HashMap<>();\n        url = null;\n    }\n\n    @Override\n    public BufferedImage read(String resource) {\n        if (!resource.endsWith(\".png\") && !resource.endsWith(\".jpg\") && !resource.endsWith(\".jpeg\") && !resource.endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + resource); // Image format is not supported\n        if (bufferedImageCache.containsKey(resource))\n            return bufferedImageCache.get(resource); // Checks the cache for the image\n\n        BufferedImage image = null;\n        try {\n            if (isAbsolute) image = ImageIO.read(Files.newInputStream(Paths.get(resource))); // Image is local\n            else image = ImageIO.read((Objects.requireNonNull(getClass().getResource(resource)))); // Image is in the JAR file\n        } catch (IOException e) {\n            System.err.println(e.getMessage());\n        }\n\n        // Null check\n        if (image == null)\n            throw new IllegalArgumentException(\"The image could not be loaded: \" + resource); // Image could not be loaded (Image is null\n\n        // Add to cache\n        bufferedImageCache.put(resource, image);\n        return image;\n    }\n\n    public BufferedImage read(String resource, boolean isAbsolute) {\n        if (!resource.endsWith(\".png\") && !resource.endsWith(\".jpg\") && !resource.endsWith(\".jpeg\") && !resource.endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + resource); // Image format is not supported\n        if (bufferedImageCache.containsKey(resource))\n            return bufferedImageCache.get(resource); // Checks the cache for the image\n\n        BufferedImage image = null;\n        try {\n            if (isAbsolute) image = ImageIO.read(Files.newInputStream(Paths.get(resource))); // Image is local\n            else image = ImageIO.read((Objects.requireNonNull(getClass().getResource(resource)))); // Image is in the JAR file\n        } catch (IOException e) {\n            System.err.println(e.getMessage());\n        }\n\n        // Null check\n        if (image == null)\n            throw new IllegalArgumentException(\"The image could not be loaded: \" + resource); // Image could not be loaded (Image is null\n\n        // Add to cache\n        bufferedImageCache.put(resource, image);\n        return image;\n    }\n\n    @Override\n    public ImageIcon readGif(String resource) {\n        if (!resource.endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + resource); // Animation format is not supported\n\n        if (imageIconCache.containsKey(resource))\n            return imageIconCache.get(resource); // Checks the cache for the Animation\n\n        if (resource.startsWith(\"/\")) resource = resource.substring(1); // Remove the first slash\n\n        ImageIcon imageIcon = null;\n        try {\n            URL url;\n            if (isAbsolute) url = new URL(resource); // Animation is local\n            else url = getClass().getClassLoader().getResource(resource); // Image is in the JAR file\n            imageIcon = new ImageIcon(Objects.requireNonNull(url)); // Load the Animation\n        } catch (MalformedURLException e) {\n            System.err.println(e.getMessage());\n        }\n\n        // Null check\n        if (imageIcon == null) throw new IllegalArgumentException(\"The image could not be loaded: \" + resource);\n\n        imageIconCache.put(resource, imageIcon);\n        return imageIcon;\n    }\n\n    public ImageIcon readGif(String resource, boolean isAbsolute) {\n        if (!resource.endsWith(\".gif\"))\n            throw new IllegalArgumentException(\"Unsupported image format: \" + resource); // Animation format is not supported\n\n        if (imageIconCache.containsKey(resource))\n            return imageIconCache.get(resource); // Checks the cache for the Animation\n\n        if (resource.startsWith(\"/\")) resource = resource.substring(1); // Remove the first slash\n\n        ImageIcon imageIcon = null;\n        try {\n            URL url;\n            if (isAbsolute) url = new URL(resource); // Animation is local\n            else url = getClass().getClassLoader().getResource(resource); // Image is in the JAR file\n            imageIcon = new ImageIcon(Objects.requireNonNull(url)); // Load the Animation\n        } catch (MalformedURLException e) {\n            System.err.println(e.getMessage());\n        }\n\n        // Null check\n        if (imageIcon == null) throw new IllegalArgumentException(\"The image could not be loaded: \" + resource);\n\n        imageIconCache.put(resource, imageIcon);\n        return imageIcon;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/de/MCmoderSD/utilities/image/ImageReader.java b/src/main/java/de/MCmoderSD/utilities/image/ImageReader.java
--- a/src/main/java/de/MCmoderSD/utilities/image/ImageReader.java	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/src/main/java/de/MCmoderSD/utilities/image/ImageReader.java	(date 1702995415644)
@@ -1,7 +1,7 @@
 package de.MCmoderSD.utilities.image;
 
 import javax.imageio.ImageIO;
-import javax.swing.ImageIcon;
+import javax.swing.*;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.net.MalformedURLException;
@@ -40,7 +40,8 @@
         BufferedImage image = null;
         try {
             if (isAbsolute) image = ImageIO.read(Files.newInputStream(Paths.get(resource))); // Image is local
-            else image = ImageIO.read((Objects.requireNonNull(getClass().getResource(resource)))); // Image is in the JAR file
+            else
+                image = ImageIO.read((Objects.requireNonNull(getClass().getResource(resource)))); // Image is in the JAR file
         } catch (IOException e) {
             System.err.println(e.getMessage());
         }
@@ -63,7 +64,8 @@
         BufferedImage image = null;
         try {
             if (isAbsolute) image = ImageIO.read(Files.newInputStream(Paths.get(resource))); // Image is local
-            else image = ImageIO.read((Objects.requireNonNull(getClass().getResource(resource)))); // Image is in the JAR file
+            else
+                image = ImageIO.read((Objects.requireNonNull(getClass().getResource(resource)))); // Image is in the JAR file
         } catch (IOException e) {
             System.err.println(e.getMessage());
         }
@@ -82,15 +84,15 @@
         if (!resource.endsWith(".gif"))
             throw new IllegalArgumentException("Unsupported image format: " + resource); // Animation format is not supported
 
+        if (!isAbsolute && resource.startsWith("/")) resource = resource.substring(1); // Remove the first slash
+
         if (imageIconCache.containsKey(resource))
             return imageIconCache.get(resource); // Checks the cache for the Animation
 
-        if (resource.startsWith("/")) resource = resource.substring(1); // Remove the first slash
-
         ImageIcon imageIcon = null;
         try {
             URL url;
-            if (isAbsolute) url = new URL(resource); // Animation is local
+            if (isAbsolute) url = Paths.get(resource).toUri().toURL(); // Animation is local
             else url = getClass().getClassLoader().getResource(resource); // Image is in the JAR file
             imageIcon = new ImageIcon(Objects.requireNonNull(url)); // Load the Animation
         } catch (MalformedURLException e) {
@@ -108,15 +110,15 @@
         if (!resource.endsWith(".gif"))
             throw new IllegalArgumentException("Unsupported image format: " + resource); // Animation format is not supported
 
+        if (!isAbsolute && resource.startsWith("/")) resource = resource.substring(1); // Remove the first slash
+
         if (imageIconCache.containsKey(resource))
             return imageIconCache.get(resource); // Checks the cache for the Animation
 
-        if (resource.startsWith("/")) resource = resource.substring(1); // Remove the first slash
-
         ImageIcon imageIcon = null;
         try {
             URL url;
-            if (isAbsolute) url = new URL(resource); // Animation is local
+            if (isAbsolute) url = Paths.get(resource).toUri().toURL(); // Animation is local
             else url = getClass().getClassLoader().getResource(resource); // Image is in the JAR file
             imageIcon = new ImageIcon(Objects.requireNonNull(url)); // Load the Animation
         } catch (MalformedURLException e) {
@@ -129,4 +131,4 @@
         imageIconCache.put(resource, imageIcon);
         return imageIcon;
     }
-}
+}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"JavadocGenerationManager\">\n    <option name=\"OUTPUT_DIRECTORY\" value=\"$PROJECT_DIR$/docs/java\" />\n    <option name=\"OPTION_SCOPE\" value=\"public\" />\n    <option name=\"OPTION_DOCUMENT_TAG_USE\" value=\"true\" />\n    <option name=\"OPTION_DOCUMENT_TAG_AUTHOR\" value=\"true\" />\n    <option name=\"OPTION_DOCUMENT_TAG_VERSION\" value=\"true\" />\n    <option name=\"HEAP_SIZE\" value=\"65536\" />\n  </component>\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"PWA\">\n    <option name=\"enabled\" value=\"true\" />\n    <option name=\"wasEnabledAtLeastOnce\" value=\"true\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision a4be43844e34ec98583704074921d3e96452268e)
+++ b/.idea/misc.xml	(date 1702979667710)
@@ -14,6 +14,7 @@
         <option value="$PROJECT_DIR$/pom.xml" />
       </list>
     </option>
+    <option name="workspaceImportForciblyTurnedOn" value="true" />
   </component>
   <component name="PWA">
     <option name="enabled" value="true" />
