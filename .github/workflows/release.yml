name: Build and Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build the project with Maven
      - name: Build with Maven
        run: mvn clean package --batch-mode --quiet

  release:
    runs-on: ubuntu-latest
    needs: build  # Ensures the build job runs first

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Get the version from the pom.xml
      - name: Get Version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      # Create a GitHub Release
      - name: Create GitHub Release
        run: |
          TAG_NAME="v${{ env.VERSION }}"
          RELEASE_NAME="Release ${{ env.VERSION }}"
          RELEASE_BODY="Release for version ${{ env.VERSION }}."
          
          # Create the release
          RELEASE_RESPONSE=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"tag_name": "'"$TAG_NAME"'", "name": "'"$RELEASE_NAME"'", "body": "'"$RELEASE_BODY"'"}' \
            https://api.github.com/repos/${{ github.repository }}/releases)
          
          # Extract the release ID
          RELEASE_ID=$(echo $RELEASE_RESPONSE | jq -r .id)
          echo "Release created with ID: $RELEASE_ID"

      # Upload the full JAR
      - name: Upload Full JAR
        run: |
          VERSION=${{ env.VERSION }}
          FILE_PATH="target/Snake-full-$VERSION.jar"
          curl -XPOST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/zip" --data-binary @"$FILE_PATH" https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=Snake-full-$VERSION.jar

      # Upload the slim JAR
      - name: Upload Slim JAR
        run: |
          VERSION=${{ env.VERSION }}
          FILE_PATH="target/Snake-slim-$VERSION.jar"
          curl -XPOST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/zip" --data-binary @"$FILE_PATH" https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=Snake-slim-$VERSION.jar