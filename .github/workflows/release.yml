name: Build and Release Java Project

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: # Allows triggering manually from GitHub UI

permissions:
  contents: write # Required for creating releases

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.project-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from pom.xml
        id: extract-version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PROJECT_VERSION=$version" >> $GITHUB_ENV
          echo "project-version=$version" >> $GITHUB_OUTPUT # Replace ::set-output

  pre-check:
    runs-on: ubuntu-latest
    needs: extract-version
    outputs:
      version: ${{ needs.extract-version.outputs.version }}
      release-id: ${{ steps.check-release.outputs.release-id }}

    steps:
      - name: Check for existing release
        id: check-release
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.extract-version.outputs.version }}")
          if echo "$response" | jq -e .id > /dev/null; then
            release_id=$(echo "$response" | jq .id)
            echo "Release exists with ID: $release_id"
            echo "release-id=$release_id" >> $GITHUB_OUTPUT
          else
            echo "No existing release found"
            echo "release-id=" >> $GITHUB_OUTPUT
          fi
        shell: /usr/bin/bash -e {0}

      - name: Delete existing release
        if: steps.check-release.outputs.release-id != ''
        run: |
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check-release.outputs.release-id }}"

  build:
    runs-on: ubuntu-latest
    needs: pre-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -B

      - name: Upload JAR files
        uses: actions/upload-artifact@v3
        with:
          name: jar-files
          path: target/*.jar

  release:
    runs-on: ubuntu-latest
    needs: [pre-check, build]

    steps:
      - name: Download JAR artifacts
        uses: actions/download-artifact@v3
        with:
          name: jar-files

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.pre-check.outputs.version }}
          release_name: Snake v${{ needs.pre-check.outputs.version }}
          body: |
            Automated release of version Snake v${{ needs.pre-check.outputs.version }}.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload JARs to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Snake-full-${{ needs.pre-check.outputs.version }}.jar
          asset_name: Snake.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Slim JAR to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: Snake-slim-${{ needs.pre-check.outputs.version }}.jar
          asset_name: Snake-texture-streaming.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}